{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Exploring Why Civil Resistance Works\n",
    "#  Mallios Charalampos p2821912\n",
    "\n",
    "## 1. Frequency of Nonviolent and Violent Campaign End Years\n",
    "* As a first step we read our data and store them as a dataframe (df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "\n",
    "\n",
    "df = pd.read_stata(\"WCRWreplication.dta\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* we need to convert every year to decade in order to handle decades below "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# divide with 10 ( 1963 -> 196) and then multiple with 10 (196 -> 1960). Cast to int for visualisation later.\n",
    "df['decade'] = (df['eyear']/10).astype(int)*10\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* we need to store sum of violent and non violent campaigns by decade"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "main_df = df[['decade', 'nonviol', 'viol']]# use only these columns\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_campaign = main_df.groupby('decade').agg(violent=('viol', 'sum'),nonviolent=('nonviol', 'sum'))# group by decade for visualization\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* during decades we plot violent and non-violent campaigns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1152x576 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import numpy as np\n",
    "%matplotlib inline\n",
    "#set grid white as it was in the assignement \n",
    "sns.set(style=\"whitegrid\")\n",
    "\n",
    "plt.figure(figsize=(16, 8))\n",
    "violents = df_campaign[\"violent\"].values\n",
    "nonviolents = df_campaign[\"nonviolent\"].values\n",
    "plt.stackplot(np.arange(1900, 2010, 10), violents,nonviolents, labels=['Violent', 'Nonviolent'])\n",
    "\n",
    "plt.xlim(1900, 2000)\n",
    "\n",
    "plt.legend(loc='upper left')#legend\n",
    "plt.xlabel('decade')\n",
    "plt.ylabel('campaigns')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>defect</th>\n",
       "      <th>outcome</th>\n",
       "      <th>peakmembership</th>\n",
       "      <th>eyear</th>\n",
       "      <th>byear</th>\n",
       "      <th>location</th>\n",
       "      <th>campaign</th>\n",
       "      <th>target</th>\n",
       "      <th>lccode</th>\n",
       "      <th>tccode</th>\n",
       "      <th>...</th>\n",
       "      <th>ef</th>\n",
       "      <th>loclpolity1</th>\n",
       "      <th>loclcap1</th>\n",
       "      <th>loclcap2</th>\n",
       "      <th>loclcap3</th>\n",
       "      <th>loclcap4</th>\n",
       "      <th>mempc</th>\n",
       "      <th>demdum</th>\n",
       "      <th>recur1</th>\n",
       "      <th>decade</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>5</td>\n",
       "      <td>50000.0</td>\n",
       "      <td>1959</td>\n",
       "      <td>1956</td>\n",
       "      <td>Cuba</td>\n",
       "      <td>Cuban Revolution</td>\n",
       "      <td>Batista regime</td>\n",
       "      <td>40.0</td>\n",
       "      <td>40.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.213400</td>\n",
       "      <td>-9.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.226839</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1950</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3</td>\n",
       "      <td>5000.0</td>\n",
       "      <td>1920</td>\n",
       "      <td>1918</td>\n",
       "      <td>Haiti</td>\n",
       "      <td>Caco Revolt</td>\n",
       "      <td>U.S. occupation</td>\n",
       "      <td>41.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1920</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>1.0</td>\n",
       "      <td>5</td>\n",
       "      <td>30000.0</td>\n",
       "      <td>1985</td>\n",
       "      <td>1985</td>\n",
       "      <td>Haiti</td>\n",
       "      <td></td>\n",
       "      <td>Jean Claude Duvalier</td>\n",
       "      <td>41.0</td>\n",
       "      <td>41.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.095000</td>\n",
       "      <td>-9.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.200712</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1980</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3</td>\n",
       "      <td>650.0</td>\n",
       "      <td>1924</td>\n",
       "      <td>1916</td>\n",
       "      <td>Dominican Republic</td>\n",
       "      <td>Dominican insurgency</td>\n",
       "      <td>U.S. occupation</td>\n",
       "      <td>42.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1920</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1965</td>\n",
       "      <td>1965</td>\n",
       "      <td>Dominican Republic</td>\n",
       "      <td>leftists</td>\n",
       "      <td>Loyalist regime</td>\n",
       "      <td>42.0</td>\n",
       "      <td>42.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.386800</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1960</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>318</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3</td>\n",
       "      <td>30000.0</td>\n",
       "      <td>1977</td>\n",
       "      <td>1974</td>\n",
       "      <td>East Timor</td>\n",
       "      <td>Freitilin</td>\n",
       "      <td>Indonesian occupation</td>\n",
       "      <td>850.0</td>\n",
       "      <td>850.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.765784</td>\n",
       "      <td>-7.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1970</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>319</td>\n",
       "      <td>0.0</td>\n",
       "      <td>5</td>\n",
       "      <td>3500.0</td>\n",
       "      <td>2005</td>\n",
       "      <td>1976</td>\n",
       "      <td>Indonesia</td>\n",
       "      <td>GAM</td>\n",
       "      <td>Indonesian occupation</td>\n",
       "      <td>850.0</td>\n",
       "      <td>850.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.765784</td>\n",
       "      <td>-7.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.659205</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>320</td>\n",
       "      <td>1.0</td>\n",
       "      <td>5</td>\n",
       "      <td>6000.0</td>\n",
       "      <td>1999</td>\n",
       "      <td>1988</td>\n",
       "      <td>East Timor</td>\n",
       "      <td>Timorese resistance</td>\n",
       "      <td>Indonesian occupation</td>\n",
       "      <td>850.0</td>\n",
       "      <td>850.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.765784</td>\n",
       "      <td>-7.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1990</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>321</td>\n",
       "      <td>0.0</td>\n",
       "      <td>5</td>\n",
       "      <td>10000.0</td>\n",
       "      <td>1998</td>\n",
       "      <td>1997</td>\n",
       "      <td>Indonesia</td>\n",
       "      <td></td>\n",
       "      <td>Suharto rule</td>\n",
       "      <td>850.0</td>\n",
       "      <td>850.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.765784</td>\n",
       "      <td>-7.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.750704</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1990</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>322</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3</td>\n",
       "      <td>2000.0</td>\n",
       "      <td>1998</td>\n",
       "      <td>1988</td>\n",
       "      <td>Papua New Guinea</td>\n",
       "      <td>Bougainville Revolt</td>\n",
       "      <td>Papuan regime</td>\n",
       "      <td>910.0</td>\n",
       "      <td>910.0</td>\n",
       "      <td>...</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>10.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.901918</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1990</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>323 rows × 86 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     defect  outcome  peakmembership  eyear  byear            location  \\\n",
       "0       1.0        5         50000.0   1959   1956                Cuba   \n",
       "1       0.0        3          5000.0   1920   1918               Haiti   \n",
       "2       1.0        5         30000.0   1985   1985               Haiti   \n",
       "3       0.0        3           650.0   1924   1916  Dominican Republic   \n",
       "4       1.0        3             NaN   1965   1965  Dominican Republic   \n",
       "..      ...      ...             ...    ...    ...                 ...   \n",
       "318     0.0        3         30000.0   1977   1974          East Timor   \n",
       "319     0.0        5          3500.0   2005   1976           Indonesia   \n",
       "320     1.0        5          6000.0   1999   1988          East Timor   \n",
       "321     0.0        5         10000.0   1998   1997           Indonesia   \n",
       "322     0.0        3          2000.0   1998   1988    Papua New Guinea   \n",
       "\n",
       "                 campaign                 target  lccode  tccode  ...  \\\n",
       "0        Cuban Revolution         Batista regime    40.0    40.0  ...   \n",
       "1             Caco Revolt        U.S. occupation    41.0     2.0  ...   \n",
       "2                           Jean Claude Duvalier    41.0    41.0  ...   \n",
       "3    Dominican insurgency        U.S. occupation    42.0     2.0  ...   \n",
       "4                leftists        Loyalist regime    42.0    42.0  ...   \n",
       "..                    ...                    ...     ...     ...  ...   \n",
       "318             Freitilin  Indonesian occupation   850.0   850.0  ...   \n",
       "319                   GAM  Indonesian occupation   850.0   850.0  ...   \n",
       "320   Timorese resistance  Indonesian occupation   850.0   850.0  ...   \n",
       "321                                 Suharto rule   850.0   850.0  ...   \n",
       "322   Bougainville Revolt          Papuan regime   910.0   910.0  ...   \n",
       "\n",
       "           ef  loclpolity1  loclcap1  loclcap2  loclcap3  loclcap4     mempc  \\\n",
       "0    0.213400         -9.0       0.0       1.0       0.0       0.0  1.226839   \n",
       "1         NaN          NaN       NaN       NaN       NaN       NaN       NaN   \n",
       "2    0.095000         -9.0       1.0       0.0       0.0       0.0  1.200712   \n",
       "3         NaN          NaN       1.0       0.0       0.0       0.0       NaN   \n",
       "4    0.386800          0.0       1.0       0.0       0.0       0.0       NaN   \n",
       "..        ...          ...       ...       ...       ...       ...       ...   \n",
       "318  0.765784         -7.0       0.0       0.0       0.0       1.0       NaN   \n",
       "319  0.765784         -7.0       0.0       0.0       0.0       1.0  0.659205   \n",
       "320  0.765784         -7.0       0.0       0.0       0.0       1.0       NaN   \n",
       "321  0.765784         -7.0       0.0       0.0       0.0       1.0  0.750704   \n",
       "322  1.000000         10.0       1.0       0.0       0.0       0.0  0.901918   \n",
       "\n",
       "     demdum  recur1  decade  \n",
       "0       0.0     0.0    1950  \n",
       "1       0.0     NaN    1920  \n",
       "2       0.0     0.0    1980  \n",
       "3       0.0     NaN    1920  \n",
       "4       0.0     0.0    1960  \n",
       "..      ...     ...     ...  \n",
       "318     0.0     0.0    1970  \n",
       "319     NaN     0.0    2000  \n",
       "320     0.0     0.0    1990  \n",
       "321     0.0     1.0    1990  \n",
       "322     1.0     0.0    1990  \n",
       "\n",
       "[323 rows x 86 columns]"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df #explore our dataset"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2: Number of Nonviolent Campaigns and Percentage of Success\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* We get only the non violent campaigns\n",
    "* We keep only data after 1940 \n",
    "* For each decade we count the all the non violent and store them to a dataframe\n",
    "* For each decade we count the all the non violent successfull and store them to a dataframe"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>decade</th>\n",
       "      <th>all</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>1940</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>1950</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>1960</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>1970</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>1980</td>\n",
       "      <td>32</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>1990</td>\n",
       "      <td>23</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6</td>\n",
       "      <td>2000</td>\n",
       "      <td>20</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   decade  all\n",
       "0    1940    5\n",
       "1    1950    9\n",
       "2    1960    7\n",
       "3    1970    7\n",
       "4    1980   32\n",
       "5    1990   23\n",
       "6    2000   20"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_non_viol = df.loc[df.nonviol==1]\n",
    "df_non_viol = df_non_viol.loc[df_non_viol.decade>=1940]\n",
    "df_non_viol = df_non_viol.loc[:, ['decade', 'success']]\n",
    "df_non_viol = df_non_viol.set_index('decade')\n",
    "df_non_viol = df_non_viol.sort_index()\n",
    "df_non_viol = df_non_viol.reset_index()\n",
    "\n",
    "#rename success column to name -> all \n",
    "sum_non_viol = df_non_viol.groupby('decade').agg('count').reset_index().rename(columns={'success' : 'all'})\n",
    "sum_non_viol\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>decade</th>\n",
       "      <th>success</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>1940</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>1950</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>1960</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>1970</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>1980</td>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>1990</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6</td>\n",
       "      <td>2000</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   decade  success\n",
       "0    1940        2\n",
       "1    1950        3\n",
       "2    1960        3\n",
       "3    1970        4\n",
       "4    1980       17\n",
       "5    1990       12\n",
       "6    2000       14"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_non_viol_suc = df_non_viol.loc[df_non_viol.success == 1].groupby('decade').agg('count').reset_index()\n",
    "df_non_viol_suc"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* We merge the previous two dataframes into one (\"all_non_viol\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>decade</th>\n",
       "      <th>all</th>\n",
       "      <th>success</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>1940</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>1950</td>\n",
       "      <td>9</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>1960</td>\n",
       "      <td>7</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>1970</td>\n",
       "      <td>7</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>1980</td>\n",
       "      <td>32</td>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>1990</td>\n",
       "      <td>23</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6</td>\n",
       "      <td>2000</td>\n",
       "      <td>20</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   decade  all  success\n",
       "0    1940    5        2\n",
       "1    1950    9        3\n",
       "2    1960    7        3\n",
       "3    1970    7        4\n",
       "4    1980   32       17\n",
       "5    1990   23       12\n",
       "6    2000   20       14"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "all_non_viol =  pd.merge(sum_non_viol, df_non_viol_suc, how='left', on='decade') #join dataframes on common column decade\n",
    "all_non_viol"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* and using the ration success/all we find the percentage successes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>decade</th>\n",
       "      <th>all</th>\n",
       "      <th>success</th>\n",
       "      <th>percentage</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>1940</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>0.400000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>1950</td>\n",
       "      <td>9</td>\n",
       "      <td>3</td>\n",
       "      <td>0.333333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>1960</td>\n",
       "      <td>7</td>\n",
       "      <td>3</td>\n",
       "      <td>0.428571</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>1970</td>\n",
       "      <td>7</td>\n",
       "      <td>4</td>\n",
       "      <td>0.571429</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>1980</td>\n",
       "      <td>32</td>\n",
       "      <td>17</td>\n",
       "      <td>0.531250</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>1990</td>\n",
       "      <td>23</td>\n",
       "      <td>12</td>\n",
       "      <td>0.521739</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6</td>\n",
       "      <td>2000</td>\n",
       "      <td>20</td>\n",
       "      <td>14</td>\n",
       "      <td>0.700000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   decade  all  success  percentage\n",
       "0    1940    5        2    0.400000\n",
       "1    1950    9        3    0.333333\n",
       "2    1960    7        3    0.428571\n",
       "3    1970    7        4    0.571429\n",
       "4    1980   32       17    0.531250\n",
       "5    1990   23       12    0.521739\n",
       "6    2000   20       14    0.700000"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "all_non_viol['percentage'] = all_non_viol['success'] / all_non_viol['all'] #create new column percentage\n",
    "all_non_viol"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* Using barlplots we plot accordingly number of non violent campaigns and the percentage successes."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1008x576 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "%matplotlib inline\n",
    "sns.set()\n",
    "\n",
    "fig = plt.figure(figsize=(14, 8)) # Create matplotlib figure\n",
    "\n",
    "ax = fig.add_subplot(111) # Create matplotlib axes\n",
    "ax2 = ax.twinx() # Create another axes that shares the same x-axis as ax.\n",
    "\n",
    "width = 0.3 # width of bars\n",
    "\n",
    "# plot barplots. Colors were found from the original assignment.\n",
    "all_non_viol['all'].plot(kind='bar',color='#4682B4', ax=ax, width=width, position=1, label='number of non violent campaigns',edgecolor='white')\n",
    "all_non_viol['percentage'].plot(kind='bar',color= '#FFA500', ax=ax2, width=width, position=0, label='percentage successes',edgecolor='white')\n",
    "fig.legend(bbox_to_anchor=(0.0623, 0.803), loc='upper left', fontsize=12)\n",
    "\n",
    "ax.set_xticklabels(all_non_viol.decade, rotation=\"horizontal\")\n",
    "ax.grid(None) # in the assignment there was no grid\n",
    "ax2.grid(None)\n",
    "ax.set_facecolor('white') #there was a white  background \n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3: Success Rate by Decade\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* Using the same methodolgy as we used for counting the non violents campaigns, we count the violents campaigns succeess and\n",
    "the percentage :"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>decade</th>\n",
       "      <th>all</th>\n",
       "      <th>success</th>\n",
       "      <th>percentage</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>1940</td>\n",
       "      <td>21</td>\n",
       "      <td>7</td>\n",
       "      <td>0.333333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>1950</td>\n",
       "      <td>19</td>\n",
       "      <td>7</td>\n",
       "      <td>0.368421</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>1960</td>\n",
       "      <td>17</td>\n",
       "      <td>4</td>\n",
       "      <td>0.235294</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>1970</td>\n",
       "      <td>26</td>\n",
       "      <td>10</td>\n",
       "      <td>0.384615</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>1980</td>\n",
       "      <td>13</td>\n",
       "      <td>5</td>\n",
       "      <td>0.384615</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>1990</td>\n",
       "      <td>45</td>\n",
       "      <td>12</td>\n",
       "      <td>0.266667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6</td>\n",
       "      <td>2000</td>\n",
       "      <td>22</td>\n",
       "      <td>3</td>\n",
       "      <td>0.136364</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   decade  all  success  percentage\n",
       "0    1940   21        7    0.333333\n",
       "1    1950   19        7    0.368421\n",
       "2    1960   17        4    0.235294\n",
       "3    1970   26       10    0.384615\n",
       "4    1980   13        5    0.384615\n",
       "5    1990   45       12    0.266667\n",
       "6    2000   22        3    0.136364"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_viol = df.loc[df.viol==1]\n",
    "df_viol = df_viol.loc[df_viol.decade>=1940]\n",
    "df_viol = df_viol.loc[:, ['decade', 'success']]\n",
    "df_viol = df_viol.set_index('decade')\n",
    "df_viol = df_viol.sort_index()\n",
    "df_viol = df_viol.reset_index()\n",
    "\n",
    "sum_viol = df_viol.groupby('decade').agg('count').reset_index().rename(columns={'success' : 'all'})\n",
    "\n",
    "df_viol_suc = df_viol.loc[df_viol.success == 1].groupby('decade').agg('count').reset_index()\n",
    "df_viol_suc\n",
    "\n",
    "all_viol =  pd.merge(sum_viol, df_viol_suc, how='left', on='decade') #join on common column decade\n",
    "\n",
    "all_viol['percentage'] = all_viol['success'] / all_viol['all']\n",
    "all_viol"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* Using barplots we plot violent and non violent campaigns together. Its clear that during the decades the campaigns tend to be\n",
    " more successful are less violent! "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1008x576 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "%matplotlib inline\n",
    "sns.set()\n",
    "sns.set(style=\"whitegrid\") # grid set on ! as on the assignemnt prototype\n",
    "\n",
    "fig = plt.figure(figsize=(14, 8)) # Create matplotlib figure\n",
    "\n",
    "ax = fig.add_subplot(111) # Create matplotlib axes\n",
    "#ax2 = ax.twinx() # Create another axes that shares the same x-axis as ax.\n",
    "\n",
    "width = 0.3\n",
    "# plot the barplots\n",
    "all_non_viol['percentage'].plot(kind='bar',color= '#4682B4', ax=ax, width=width, position=1, label='nonviolent',edgecolor='white')\n",
    "all_viol['percentage'].plot(kind='bar',color='#FF4500', ax=ax, width=width, position=0, label='violent',edgecolor='white')\n",
    "fig.legend(bbox_to_anchor=(0.0623, 0.803), loc='upper left', fontsize=12)\n",
    "plt.xlabel('decade')\n",
    "plt.ylabel('success rate')\n",
    "ax.set_xticklabels(all_non_viol.decade, rotation=\"horizontal\")\n",
    "ax.grid(True)#set grid on\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 4. Twenty-Five Largest Resistance Campaigns, 1900-2006\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* We choose the largest 25 campaigns by peakmembership, showing  PEAK MEMBERSHIP, BEGINNING YEAR, END YEAR, LOCATION,TARGET\tVIOLENCE and RESULTS."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PEAK MEMBERSHIP</th>\n",
       "      <th>BEGINNING YEAR</th>\n",
       "      <th>END YEAR</th>\n",
       "      <th>LOCATION</th>\n",
       "      <th>TARGET</th>\n",
       "      <th>VIOLENCE</th>\n",
       "      <th>RESULTS</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>257</td>\n",
       "      <td>4500000.0</td>\n",
       "      <td>1937</td>\n",
       "      <td>1945</td>\n",
       "      <td>China</td>\n",
       "      <td>Japanese occupation</td>\n",
       "      <td>YES</td>\n",
       "      <td>FAIL</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>206</td>\n",
       "      <td>2000000.0</td>\n",
       "      <td>1977</td>\n",
       "      <td>1979</td>\n",
       "      <td>Iran</td>\n",
       "      <td>Shah Reza Pahlavi</td>\n",
       "      <td>NO</td>\n",
       "      <td>SUCCESS</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>311</td>\n",
       "      <td>2000000.0</td>\n",
       "      <td>1986</td>\n",
       "      <td>1983</td>\n",
       "      <td>Philippines</td>\n",
       "      <td>Ferdinand Marcos</td>\n",
       "      <td>NO</td>\n",
       "      <td>SUCCESS</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>10</td>\n",
       "      <td>1000000.0</td>\n",
       "      <td>2006</td>\n",
       "      <td>2006</td>\n",
       "      <td>Mexico</td>\n",
       "      <td>Calderon regime</td>\n",
       "      <td>NO</td>\n",
       "      <td>FAIL</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>38</td>\n",
       "      <td>1000000.0</td>\n",
       "      <td>1984</td>\n",
       "      <td>1985</td>\n",
       "      <td>Brazil</td>\n",
       "      <td>Military rule</td>\n",
       "      <td>NO</td>\n",
       "      <td>SUCCESS</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>141</td>\n",
       "      <td>1000000.0</td>\n",
       "      <td>1993</td>\n",
       "      <td>1999</td>\n",
       "      <td>Nigeria</td>\n",
       "      <td>Military rule</td>\n",
       "      <td>NO</td>\n",
       "      <td>SUCCESS</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>228</td>\n",
       "      <td>1000000.0</td>\n",
       "      <td>2005</td>\n",
       "      <td>2005</td>\n",
       "      <td>Lebanon</td>\n",
       "      <td>Syrian forces</td>\n",
       "      <td>NO</td>\n",
       "      <td>SUCCESS</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>255</td>\n",
       "      <td>1000000.0</td>\n",
       "      <td>1922</td>\n",
       "      <td>1949</td>\n",
       "      <td>China</td>\n",
       "      <td>Kuomintang regime</td>\n",
       "      <td>YES</td>\n",
       "      <td>SUCCESS</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>262</td>\n",
       "      <td>1000000.0</td>\n",
       "      <td>1967</td>\n",
       "      <td>1968</td>\n",
       "      <td>China</td>\n",
       "      <td>anti-Maoists</td>\n",
       "      <td>YES</td>\n",
       "      <td>FAIL</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>265</td>\n",
       "      <td>1000000.0</td>\n",
       "      <td>1989</td>\n",
       "      <td>1989</td>\n",
       "      <td>China</td>\n",
       "      <td>Communist regime</td>\n",
       "      <td>NO</td>\n",
       "      <td>FAIL</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>289</td>\n",
       "      <td>1000000.0</td>\n",
       "      <td>1988</td>\n",
       "      <td>1988</td>\n",
       "      <td>Burma</td>\n",
       "      <td>military junta</td>\n",
       "      <td>NO</td>\n",
       "      <td>FAIL</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>45</td>\n",
       "      <td>700000.0</td>\n",
       "      <td>1983</td>\n",
       "      <td>1989</td>\n",
       "      <td>Chile</td>\n",
       "      <td>Augusto Pinochet</td>\n",
       "      <td>NO</td>\n",
       "      <td>SUCCESS</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>105</td>\n",
       "      <td>700000.0</td>\n",
       "      <td>1990</td>\n",
       "      <td>1991</td>\n",
       "      <td>Russia</td>\n",
       "      <td>Anti-coup</td>\n",
       "      <td>NO</td>\n",
       "      <td>SUCCESS</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>261</td>\n",
       "      <td>550000.0</td>\n",
       "      <td>1956</td>\n",
       "      <td>1957</td>\n",
       "      <td>China</td>\n",
       "      <td>Communist regime</td>\n",
       "      <td>NO</td>\n",
       "      <td>FAIL</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>75</td>\n",
       "      <td>500000.0</td>\n",
       "      <td>1989</td>\n",
       "      <td>1989</td>\n",
       "      <td>Czechoslovakia</td>\n",
       "      <td>Communist regime</td>\n",
       "      <td>NO</td>\n",
       "      <td>SUCCESS</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>92</td>\n",
       "      <td>500000.0</td>\n",
       "      <td>1963</td>\n",
       "      <td>1963</td>\n",
       "      <td>Greece</td>\n",
       "      <td>Karamanlis regime</td>\n",
       "      <td>NO</td>\n",
       "      <td>SUCCESS</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>113</td>\n",
       "      <td>500000.0</td>\n",
       "      <td>2001</td>\n",
       "      <td>2004</td>\n",
       "      <td>Ukraine</td>\n",
       "      <td>Kuchma regime</td>\n",
       "      <td>NO</td>\n",
       "      <td>SUCCESS</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>189</td>\n",
       "      <td>500000.0</td>\n",
       "      <td>2002</td>\n",
       "      <td>2003</td>\n",
       "      <td>Madagascar</td>\n",
       "      <td>Radsiraka regime</td>\n",
       "      <td>NO</td>\n",
       "      <td>SUCCESS</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>312</td>\n",
       "      <td>500000.0</td>\n",
       "      <td>2001</td>\n",
       "      <td>2001</td>\n",
       "      <td>Philippines</td>\n",
       "      <td>Estrada regime</td>\n",
       "      <td>NO</td>\n",
       "      <td>SUCCESS</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>63</td>\n",
       "      <td>400000.0</td>\n",
       "      <td>1953</td>\n",
       "      <td>1953</td>\n",
       "      <td>East Germany</td>\n",
       "      <td>Communist regime</td>\n",
       "      <td>NO</td>\n",
       "      <td>FAIL</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>103</td>\n",
       "      <td>400000.0</td>\n",
       "      <td>1941</td>\n",
       "      <td>1945</td>\n",
       "      <td>USSR</td>\n",
       "      <td>Nazi occupation</td>\n",
       "      <td>YES</td>\n",
       "      <td>FAIL</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>188</td>\n",
       "      <td>400000.0</td>\n",
       "      <td>1991</td>\n",
       "      <td>1993</td>\n",
       "      <td>Madagascar</td>\n",
       "      <td>Didier Radsiraka</td>\n",
       "      <td>NO</td>\n",
       "      <td>SUCCESS</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>303</td>\n",
       "      <td>340000.0</td>\n",
       "      <td>1958</td>\n",
       "      <td>1975</td>\n",
       "      <td>Vietnam</td>\n",
       "      <td>U.S. occupation</td>\n",
       "      <td>YES</td>\n",
       "      <td>SUCCESS</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>66</td>\n",
       "      <td>300000.0</td>\n",
       "      <td>1944</td>\n",
       "      <td>1944</td>\n",
       "      <td>Poland</td>\n",
       "      <td>German occupation</td>\n",
       "      <td>YES</td>\n",
       "      <td>FAIL</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>77</td>\n",
       "      <td>300000.0</td>\n",
       "      <td>1943</td>\n",
       "      <td>1945</td>\n",
       "      <td>Italy</td>\n",
       "      <td>Nazi occupation</td>\n",
       "      <td>YES</td>\n",
       "      <td>FAIL</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     PEAK MEMBERSHIP  BEGINNING YEAR   END YEAR        LOCATION  \\\n",
       "257        4500000.0            1937       1945           China   \n",
       "206        2000000.0            1977       1979            Iran   \n",
       "311        2000000.0            1986       1983     Philippines   \n",
       "10         1000000.0            2006       2006          Mexico   \n",
       "38         1000000.0            1984       1985          Brazil   \n",
       "141        1000000.0            1993       1999         Nigeria   \n",
       "228        1000000.0            2005       2005         Lebanon   \n",
       "255        1000000.0            1922       1949           China   \n",
       "262        1000000.0            1967       1968           China   \n",
       "265        1000000.0            1989       1989           China   \n",
       "289        1000000.0            1988       1988           Burma   \n",
       "45          700000.0            1983       1989           Chile   \n",
       "105         700000.0            1990       1991          Russia   \n",
       "261         550000.0            1956       1957           China   \n",
       "75          500000.0            1989       1989  Czechoslovakia   \n",
       "92          500000.0            1963       1963          Greece   \n",
       "113         500000.0            2001       2004         Ukraine   \n",
       "189         500000.0            2002       2003      Madagascar   \n",
       "312         500000.0            2001       2001     Philippines   \n",
       "63          400000.0            1953       1953    East Germany   \n",
       "103         400000.0            1941       1945            USSR   \n",
       "188         400000.0            1991       1993      Madagascar   \n",
       "303         340000.0            1958       1975         Vietnam   \n",
       "66          300000.0            1944       1944          Poland   \n",
       "77          300000.0            1943       1945           Italy   \n",
       "\n",
       "                  TARGET VIOLENCE  RESULTS  \n",
       "257  Japanese occupation      YES     FAIL  \n",
       "206    Shah Reza Pahlavi       NO  SUCCESS  \n",
       "311     Ferdinand Marcos       NO  SUCCESS  \n",
       "10       Calderon regime       NO     FAIL  \n",
       "38         Military rule       NO  SUCCESS  \n",
       "141        Military rule       NO  SUCCESS  \n",
       "228        Syrian forces       NO  SUCCESS  \n",
       "255    Kuomintang regime      YES  SUCCESS  \n",
       "262         anti-Maoists      YES     FAIL  \n",
       "265     Communist regime       NO     FAIL  \n",
       "289       military junta       NO     FAIL  \n",
       "45      Augusto Pinochet       NO  SUCCESS  \n",
       "105            Anti-coup       NO  SUCCESS  \n",
       "261     Communist regime       NO     FAIL  \n",
       "75      Communist regime       NO  SUCCESS  \n",
       "92     Karamanlis regime       NO  SUCCESS  \n",
       "113        Kuchma regime       NO  SUCCESS  \n",
       "189     Radsiraka regime       NO  SUCCESS  \n",
       "312       Estrada regime       NO  SUCCESS  \n",
       "63      Communist regime       NO     FAIL  \n",
       "103      Nazi occupation      YES     FAIL  \n",
       "188     Didier Radsiraka       NO  SUCCESS  \n",
       "303      U.S. occupation      YES  SUCCESS  \n",
       "66     German occupation      YES     FAIL  \n",
       "77       Nazi occupation      YES     FAIL  "
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_member = df[['peakmembership','byear','eyear','location','target','viol','success']]\n",
    "df_member_25 = df_member.nlargest(25, 'peakmembership') # the top 25 of column\n",
    "df_member_25.reset_index(drop=True)\n",
    "df_member_25.columns  =['PEAK MEMBERSHIP', 'BEGINNING YEAR',' END YEAR','LOCATION','TARGET','VIOLENCE','RESULTS']#rename\n",
    "df_member_25.loc[df_member_25['RESULTS'] == 0 ,'RESULTS'] = 'FAIL' #tranformation\n",
    "df_member_25.loc[df_member_25['RESULTS'] == 1, 'RESULTS'] = 'SUCCESS'#tranformation\n",
    "df_member_25.loc[df_member_25['VIOLENCE'] == 0 ,'VIOLENCE'] = 'NO'#tranformation\n",
    "df_member_25.loc[df_member_25['VIOLENCE'] == 1, 'VIOLENCE'] = 'YES'#tranformation\n",
    "df_member_25"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* Choosing Greece as location of the campaign, we see a campaign against Karamanlis. Indeed, the history confirms. On 1963\n",
    "a non violent campaign has a result (success) that Karamanlis left the country and his position for Paris."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PEAK MEMBERSHIP</th>\n",
       "      <th>BEGINNING YEAR</th>\n",
       "      <th>END YEAR</th>\n",
       "      <th>LOCATION</th>\n",
       "      <th>TARGET</th>\n",
       "      <th>VIOLENCE</th>\n",
       "      <th>RESULTS</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>92</td>\n",
       "      <td>500000.0</td>\n",
       "      <td>1963</td>\n",
       "      <td>1963</td>\n",
       "      <td>Greece</td>\n",
       "      <td>Karamanlis regime</td>\n",
       "      <td>NO</td>\n",
       "      <td>SUCCESS</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    PEAK MEMBERSHIP  BEGINNING YEAR   END YEAR LOCATION             TARGET  \\\n",
       "92         500000.0            1963       1963   Greece  Karamanlis regime   \n",
       "\n",
       "   VIOLENCE  RESULTS  \n",
       "92       NO  SUCCESS  "
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_member_25_greece = df_member_25[df_member_25['LOCATION'] == 'Greece']#choose only Greeece\n",
    "df_member_25_greece # show it"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* Choosing Greece as location of the campaign, we see a campaign against Karamanlis. Indeed, the history confirms. On 1963\n",
    "a non violent campaign has a result (success) that Karamanlis left the country and his position for Paris."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 5. The Effect of Participation on the Probability of Campaign Success\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* We run a logistic regression for success on membership per capita, controlling for the location’s logged population the year the campaign ends"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Optimization terminated successfully.\n",
      "         Current function value: 0.594790\n",
      "         Iterations 5\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "        <td>Model:</td>              <td>Logit</td>      <td>Pseudo R-squared:</td>    <td>0.129</td>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <td>Dependent Variable:</td>      <td>success</td>           <td>AIC:</td>         <td>199.9014</td> \n",
       "</tr>\n",
       "<tr>\n",
       "         <td>Date:</td>        <td>2020-05-02 14:52</td>       <td>BIC:</td>         <td>209.1827</td> \n",
       "</tr>\n",
       "<tr>\n",
       "   <td>No. Observations:</td>         <td>163</td>        <td>Log-Likelihood:</td>    <td>-96.951</td> \n",
       "</tr>\n",
       "<tr>\n",
       "       <td>Df Model:</td>              <td>2</td>            <td>LL-Null:</td>        <td>-111.35</td> \n",
       "</tr>\n",
       "<tr>\n",
       "     <td>Df Residuals:</td>           <td>160</td>         <td>LLR p-value:</td>    <td>5.5508e-07</td>\n",
       "</tr>\n",
       "<tr>\n",
       "      <td>Converged:</td>           <td>1.0000</td>           <td>Scale:</td>         <td>1.0000</td>  \n",
       "</tr>\n",
       "<tr>\n",
       "    <td>No. Iterations:</td>        <td>5.0000</td>              <td></td>               <td></td>     \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "      <td></td>       <th>Coef.</th>  <th>Std.Err.</th>    <th>z</th>     <th>P>|z|</th> <th>[0.025</th>  <th>0.975]</th> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Intercept</th> <td>-5.8199</td>  <td>1.9207</td>  <td>-3.0301</td> <td>0.0024</td> <td>-9.5843</td> <td>-2.0555</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>mempc</th>     <td>4.4892</td>   <td>0.9857</td>  <td>4.5545</td>  <td>0.0000</td> <td>2.5573</td>  <td>6.4210</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>lnpop</th>     <td>0.0907</td>   <td>0.1285</td>  <td>0.7058</td>  <td>0.4803</td> <td>-0.1612</td> <td>0.3426</td> \n",
       "</tr>\n",
       "</table>"
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary2.Summary'>\n",
       "\"\"\"\n",
       "                         Results: Logit\n",
       "=================================================================\n",
       "Model:              Logit            Pseudo R-squared: 0.129     \n",
       "Dependent Variable: success          AIC:              199.9014  \n",
       "Date:               2020-05-02 14:52 BIC:              209.1827  \n",
       "No. Observations:   163              Log-Likelihood:   -96.951   \n",
       "Df Model:           2                LL-Null:          -111.35   \n",
       "Df Residuals:       160              LLR p-value:      5.5508e-07\n",
       "Converged:          1.0000           Scale:            1.0000    \n",
       "No. Iterations:     5.0000                                       \n",
       "------------------------------------------------------------------\n",
       "               Coef.   Std.Err.     z     P>|z|    [0.025   0.975]\n",
       "------------------------------------------------------------------\n",
       "Intercept     -5.8199    1.9207  -3.0301  0.0024  -9.5843  -2.0555\n",
       "mempc          4.4892    0.9857   4.5545  0.0000   2.5573   6.4210\n",
       "lnpop          0.0907    0.1285   0.7058  0.4803  -0.1612   0.3426\n",
       "=================================================================\n",
       "\n",
       "\"\"\""
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from statsmodels.formula.api import logit\n",
    "\n",
    "success_log = logit(\"success ~ mempc + lnpop\", df).fit() #logistic regreesion fit\n",
    "\n",
    "success_log.summary2() #summary statistics"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* one unit increase in mempc has a result an increase of 4.4892 in the log odds of successful campaign. This means that the odds ratio increases by e^4.4892(~89).\n",
    "\n",
    "* one unit increase in lnpop  has a result an increase of 0.0907 in the log odds of successful campaign. This means that the odds ratio increases by e^0.0907(~1.1).\n",
    "\n",
    "* If we hold all the independent variables to zero, the successful campaign log odds comes from intercerpt, this means is e^(-5.8199)(~0.0029)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* With the predict function and our dataframe as input we plot the log odds scatterplot."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1008x576 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(14, 8))\n",
    "sns.set(style=\"whitegrid\")\n",
    "#plot log odds. predict using the log model on our dataframe\n",
    "predictions = success_log.predict(df)\n",
    "plt.scatter(df['mempc'],predictions)\n",
    "plt.xlabel(\"Particapants per Capita, logged\")\n",
    "plt.ylabel(\"Probability of Success\")\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>defect</th>\n",
       "      <th>outcome</th>\n",
       "      <th>peakmembership</th>\n",
       "      <th>eyear</th>\n",
       "      <th>byear</th>\n",
       "      <th>location</th>\n",
       "      <th>campaign</th>\n",
       "      <th>target</th>\n",
       "      <th>lccode</th>\n",
       "      <th>tccode</th>\n",
       "      <th>...</th>\n",
       "      <th>loclpolity1</th>\n",
       "      <th>loclcap1</th>\n",
       "      <th>loclcap2</th>\n",
       "      <th>loclcap3</th>\n",
       "      <th>loclcap4</th>\n",
       "      <th>mempc</th>\n",
       "      <th>demdum</th>\n",
       "      <th>recur1</th>\n",
       "      <th>decade</th>\n",
       "      <th>predictions</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>5</td>\n",
       "      <td>50000.0</td>\n",
       "      <td>1959</td>\n",
       "      <td>1956</td>\n",
       "      <td>Cuba</td>\n",
       "      <td>Cuban Revolution</td>\n",
       "      <td>Batista regime</td>\n",
       "      <td>40.0</td>\n",
       "      <td>40.0</td>\n",
       "      <td>...</td>\n",
       "      <td>-9.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.226839</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1950</td>\n",
       "      <td>0.624616</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3</td>\n",
       "      <td>5000.0</td>\n",
       "      <td>1920</td>\n",
       "      <td>1918</td>\n",
       "      <td>Haiti</td>\n",
       "      <td>Caco Revolt</td>\n",
       "      <td>U.S. occupation</td>\n",
       "      <td>41.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1920</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>1.0</td>\n",
       "      <td>5</td>\n",
       "      <td>30000.0</td>\n",
       "      <td>1985</td>\n",
       "      <td>1985</td>\n",
       "      <td>Haiti</td>\n",
       "      <td></td>\n",
       "      <td>Jean Claude Duvalier</td>\n",
       "      <td>41.0</td>\n",
       "      <td>41.0</td>\n",
       "      <td>...</td>\n",
       "      <td>-9.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.200712</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1980</td>\n",
       "      <td>0.598488</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3</td>\n",
       "      <td>650.0</td>\n",
       "      <td>1924</td>\n",
       "      <td>1916</td>\n",
       "      <td>Dominican Republic</td>\n",
       "      <td>Dominican insurgency</td>\n",
       "      <td>U.S. occupation</td>\n",
       "      <td>42.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1920</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1965</td>\n",
       "      <td>1965</td>\n",
       "      <td>Dominican Republic</td>\n",
       "      <td>leftists</td>\n",
       "      <td>Loyalist regime</td>\n",
       "      <td>42.0</td>\n",
       "      <td>42.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1960</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>318</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3</td>\n",
       "      <td>30000.0</td>\n",
       "      <td>1977</td>\n",
       "      <td>1974</td>\n",
       "      <td>East Timor</td>\n",
       "      <td>Freitilin</td>\n",
       "      <td>Indonesian occupation</td>\n",
       "      <td>850.0</td>\n",
       "      <td>850.0</td>\n",
       "      <td>...</td>\n",
       "      <td>-7.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1970</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>319</td>\n",
       "      <td>0.0</td>\n",
       "      <td>5</td>\n",
       "      <td>3500.0</td>\n",
       "      <td>2005</td>\n",
       "      <td>1976</td>\n",
       "      <td>Indonesia</td>\n",
       "      <td>GAM</td>\n",
       "      <td>Indonesian occupation</td>\n",
       "      <td>850.0</td>\n",
       "      <td>850.0</td>\n",
       "      <td>...</td>\n",
       "      <td>-7.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.659205</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2000</td>\n",
       "      <td>0.132260</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>320</td>\n",
       "      <td>1.0</td>\n",
       "      <td>5</td>\n",
       "      <td>6000.0</td>\n",
       "      <td>1999</td>\n",
       "      <td>1988</td>\n",
       "      <td>East Timor</td>\n",
       "      <td>Timorese resistance</td>\n",
       "      <td>Indonesian occupation</td>\n",
       "      <td>850.0</td>\n",
       "      <td>850.0</td>\n",
       "      <td>...</td>\n",
       "      <td>-7.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1990</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>321</td>\n",
       "      <td>0.0</td>\n",
       "      <td>5</td>\n",
       "      <td>10000.0</td>\n",
       "      <td>1998</td>\n",
       "      <td>1997</td>\n",
       "      <td>Indonesia</td>\n",
       "      <td></td>\n",
       "      <td>Suharto rule</td>\n",
       "      <td>850.0</td>\n",
       "      <td>850.0</td>\n",
       "      <td>...</td>\n",
       "      <td>-7.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.750704</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1990</td>\n",
       "      <td>0.183050</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>322</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3</td>\n",
       "      <td>2000.0</td>\n",
       "      <td>1998</td>\n",
       "      <td>1988</td>\n",
       "      <td>Papua New Guinea</td>\n",
       "      <td>Bougainville Revolt</td>\n",
       "      <td>Papuan regime</td>\n",
       "      <td>910.0</td>\n",
       "      <td>910.0</td>\n",
       "      <td>...</td>\n",
       "      <td>10.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.901918</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1990</td>\n",
       "      <td>0.297537</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>323 rows × 87 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     defect  outcome  peakmembership  eyear  byear            location  \\\n",
       "0       1.0        5         50000.0   1959   1956                Cuba   \n",
       "1       0.0        3          5000.0   1920   1918               Haiti   \n",
       "2       1.0        5         30000.0   1985   1985               Haiti   \n",
       "3       0.0        3           650.0   1924   1916  Dominican Republic   \n",
       "4       1.0        3             NaN   1965   1965  Dominican Republic   \n",
       "..      ...      ...             ...    ...    ...                 ...   \n",
       "318     0.0        3         30000.0   1977   1974          East Timor   \n",
       "319     0.0        5          3500.0   2005   1976           Indonesia   \n",
       "320     1.0        5          6000.0   1999   1988          East Timor   \n",
       "321     0.0        5         10000.0   1998   1997           Indonesia   \n",
       "322     0.0        3          2000.0   1998   1988    Papua New Guinea   \n",
       "\n",
       "                 campaign                 target  lccode  tccode  ...  \\\n",
       "0        Cuban Revolution         Batista regime    40.0    40.0  ...   \n",
       "1             Caco Revolt        U.S. occupation    41.0     2.0  ...   \n",
       "2                           Jean Claude Duvalier    41.0    41.0  ...   \n",
       "3    Dominican insurgency        U.S. occupation    42.0     2.0  ...   \n",
       "4                leftists        Loyalist regime    42.0    42.0  ...   \n",
       "..                    ...                    ...     ...     ...  ...   \n",
       "318             Freitilin  Indonesian occupation   850.0   850.0  ...   \n",
       "319                   GAM  Indonesian occupation   850.0   850.0  ...   \n",
       "320   Timorese resistance  Indonesian occupation   850.0   850.0  ...   \n",
       "321                                 Suharto rule   850.0   850.0  ...   \n",
       "322   Bougainville Revolt          Papuan regime   910.0   910.0  ...   \n",
       "\n",
       "     loclpolity1  loclcap1  loclcap2  loclcap3  loclcap4     mempc  demdum  \\\n",
       "0           -9.0       0.0       1.0       0.0       0.0  1.226839     0.0   \n",
       "1            NaN       NaN       NaN       NaN       NaN       NaN     0.0   \n",
       "2           -9.0       1.0       0.0       0.0       0.0  1.200712     0.0   \n",
       "3            NaN       1.0       0.0       0.0       0.0       NaN     0.0   \n",
       "4            0.0       1.0       0.0       0.0       0.0       NaN     0.0   \n",
       "..           ...       ...       ...       ...       ...       ...     ...   \n",
       "318         -7.0       0.0       0.0       0.0       1.0       NaN     0.0   \n",
       "319         -7.0       0.0       0.0       0.0       1.0  0.659205     NaN   \n",
       "320         -7.0       0.0       0.0       0.0       1.0       NaN     0.0   \n",
       "321         -7.0       0.0       0.0       0.0       1.0  0.750704     0.0   \n",
       "322         10.0       1.0       0.0       0.0       0.0  0.901918     1.0   \n",
       "\n",
       "     recur1  decade  predictions  \n",
       "0       0.0    1950     0.624616  \n",
       "1       NaN    1920          NaN  \n",
       "2       0.0    1980     0.598488  \n",
       "3       NaN    1920          NaN  \n",
       "4       0.0    1960          NaN  \n",
       "..      ...     ...          ...  \n",
       "318     0.0    1970          NaN  \n",
       "319     0.0    2000     0.132260  \n",
       "320     0.0    1990          NaN  \n",
       "321     1.0    1990     0.183050  \n",
       "322     0.0    1990     0.297537  \n",
       "\n",
       "[323 rows x 87 columns]"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 6. The Level of Participation Tipping Point\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* In our previous scatterplot we plot the abline which identifies probabilty 0.5 cut-off point."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1008x576 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(14, 8))\n",
    "sns.set(style=\"whitegrid\")\n",
    "\n",
    "predictions = success_log.predict(df)\n",
    "plt.scatter(df['mempc'],predictions)\n",
    "plt.xlabel(\"Particapants per Capita, logged\")\n",
    "plt.ylabel(\"Probability of Success\")\n",
    "#plot the ab line which occurs on 0.5 probality\n",
    "plt.axhline(y=0.5, color='firebrick', linestyle='-')\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* In order a campaign to be successful we consider that must have a probabilty above 0.5.\n",
    "* We consider the lowest cut-off point to be the indicator of which is the minimum participation of a campaign to be successful.\n",
    "* We will sort the dataframe which has all the info gathered together, and for the minimum probablity above 0.5 we will choose\n",
    "the respective mempc."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>mempc</th>\n",
       "      <th>lmembers</th>\n",
       "      <th>lnpop</th>\n",
       "      <th>success</th>\n",
       "      <th>predictions</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>216</td>\n",
       "      <td>1.110516</td>\n",
       "      <td>10.308952</td>\n",
       "      <td>9.283026</td>\n",
       "      <td>0</td>\n",
       "      <td>0.501905</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>299</td>\n",
       "      <td>1.096068</td>\n",
       "      <td>11.002100</td>\n",
       "      <td>10.037786</td>\n",
       "      <td>1</td>\n",
       "      <td>0.502808</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>177</td>\n",
       "      <td>1.119458</td>\n",
       "      <td>10.043249</td>\n",
       "      <td>8.971530</td>\n",
       "      <td>0</td>\n",
       "      <td>0.504875</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>269</td>\n",
       "      <td>1.092927</td>\n",
       "      <td>11.512925</td>\n",
       "      <td>10.534025</td>\n",
       "      <td>0</td>\n",
       "      <td>0.510537</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>72</td>\n",
       "      <td>1.121430</td>\n",
       "      <td>10.308952</td>\n",
       "      <td>9.192685</td>\n",
       "      <td>0</td>\n",
       "      <td>0.512102</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>266</td>\n",
       "      <td>1.153200</td>\n",
       "      <td>8.853665</td>\n",
       "      <td>7.677474</td>\n",
       "      <td>0</td>\n",
       "      <td>0.513390</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>97</td>\n",
       "      <td>1.145338</td>\n",
       "      <td>9.615806</td>\n",
       "      <td>8.395606</td>\n",
       "      <td>0</td>\n",
       "      <td>0.520845</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>223</td>\n",
       "      <td>1.131224</td>\n",
       "      <td>10.308952</td>\n",
       "      <td>9.113092</td>\n",
       "      <td>0</td>\n",
       "      <td>0.521278</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>140</td>\n",
       "      <td>1.091469</td>\n",
       "      <td>12.611538</td>\n",
       "      <td>11.554644</td>\n",
       "      <td>0</td>\n",
       "      <td>0.532006</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>197</td>\n",
       "      <td>1.138721</td>\n",
       "      <td>10.596635</td>\n",
       "      <td>9.305737</td>\n",
       "      <td>0</td>\n",
       "      <td>0.534021</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>22</td>\n",
       "      <td>1.165337</td>\n",
       "      <td>9.510445</td>\n",
       "      <td>8.161110</td>\n",
       "      <td>0</td>\n",
       "      <td>0.537911</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>67</td>\n",
       "      <td>1.127177</td>\n",
       "      <td>11.512925</td>\n",
       "      <td>10.213945</td>\n",
       "      <td>0</td>\n",
       "      <td>0.541620</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>250</td>\n",
       "      <td>1.164155</td>\n",
       "      <td>9.903487</td>\n",
       "      <td>8.507015</td>\n",
       "      <td>1</td>\n",
       "      <td>0.544386</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>154</td>\n",
       "      <td>1.163734</td>\n",
       "      <td>10.308952</td>\n",
       "      <td>8.858511</td>\n",
       "      <td>0</td>\n",
       "      <td>0.551816</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>268</td>\n",
       "      <td>1.140233</td>\n",
       "      <td>11.512925</td>\n",
       "      <td>10.096996</td>\n",
       "      <td>1</td>\n",
       "      <td>0.553511</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>99</td>\n",
       "      <td>1.147488</td>\n",
       "      <td>11.512925</td>\n",
       "      <td>10.033151</td>\n",
       "      <td>0</td>\n",
       "      <td>0.560119</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>249</td>\n",
       "      <td>1.185595</td>\n",
       "      <td>9.903487</td>\n",
       "      <td>8.353182</td>\n",
       "      <td>1</td>\n",
       "      <td>0.564710</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>173</td>\n",
       "      <td>1.170469</td>\n",
       "      <td>10.819778</td>\n",
       "      <td>9.243967</td>\n",
       "      <td>0</td>\n",
       "      <td>0.567882</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>130</td>\n",
       "      <td>1.207249</td>\n",
       "      <td>9.210340</td>\n",
       "      <td>7.629198</td>\n",
       "      <td>0</td>\n",
       "      <td>0.572444</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>131</td>\n",
       "      <td>1.213380</td>\n",
       "      <td>9.210340</td>\n",
       "      <td>7.590645</td>\n",
       "      <td>0</td>\n",
       "      <td>0.578314</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>185</td>\n",
       "      <td>1.153886</td>\n",
       "      <td>12.206073</td>\n",
       "      <td>10.578233</td>\n",
       "      <td>1</td>\n",
       "      <td>0.579279</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>105</td>\n",
       "      <td>1.130470</td>\n",
       "      <td>13.458836</td>\n",
       "      <td>11.905520</td>\n",
       "      <td>1</td>\n",
       "      <td>0.583003</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>1.200712</td>\n",
       "      <td>10.308952</td>\n",
       "      <td>8.585698</td>\n",
       "      <td>1</td>\n",
       "      <td>0.586438</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>312</td>\n",
       "      <td>1.162657</td>\n",
       "      <td>13.122363</td>\n",
       "      <td>11.286525</td>\n",
       "      <td>1</td>\n",
       "      <td>0.604309</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>303</td>\n",
       "      <td>1.184168</td>\n",
       "      <td>12.736701</td>\n",
       "      <td>10.755821</td>\n",
       "      <td>1</td>\n",
       "      <td>0.615826</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>186</td>\n",
       "      <td>1.259079</td>\n",
       "      <td>8.922658</td>\n",
       "      <td>7.086654</td>\n",
       "      <td>1</td>\n",
       "      <td>0.616633</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>297</td>\n",
       "      <td>1.199000</td>\n",
       "      <td>12.206073</td>\n",
       "      <td>10.180211</td>\n",
       "      <td>0</td>\n",
       "      <td>0.619218</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>1.226839</td>\n",
       "      <td>10.819778</td>\n",
       "      <td>8.819231</td>\n",
       "      <td>1</td>\n",
       "      <td>0.619573</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>38</td>\n",
       "      <td>1.169789</td>\n",
       "      <td>13.815511</td>\n",
       "      <td>11.810257</td>\n",
       "      <td>1</td>\n",
       "      <td>0.623160</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>96</td>\n",
       "      <td>1.225560</td>\n",
       "      <td>11.156251</td>\n",
       "      <td>9.102980</td>\n",
       "      <td>1</td>\n",
       "      <td>0.624276</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>31</td>\n",
       "      <td>1.208794</td>\n",
       "      <td>12.206073</td>\n",
       "      <td>10.097724</td>\n",
       "      <td>1</td>\n",
       "      <td>0.627783</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>141</td>\n",
       "      <td>1.183793</td>\n",
       "      <td>13.815511</td>\n",
       "      <td>11.670548</td>\n",
       "      <td>1</td>\n",
       "      <td>0.634871</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>32</td>\n",
       "      <td>1.289875</td>\n",
       "      <td>8.517193</td>\n",
       "      <td>6.603117</td>\n",
       "      <td>1</td>\n",
       "      <td>0.638685</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>226</td>\n",
       "      <td>1.265478</td>\n",
       "      <td>10.126631</td>\n",
       "      <td>8.002215</td>\n",
       "      <td>0</td>\n",
       "      <td>0.642693</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>114</td>\n",
       "      <td>1.247988</td>\n",
       "      <td>11.512925</td>\n",
       "      <td>9.225190</td>\n",
       "      <td>0</td>\n",
       "      <td>0.650106</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>113</td>\n",
       "      <td>1.217276</td>\n",
       "      <td>13.122363</td>\n",
       "      <td>10.780103</td>\n",
       "      <td>1</td>\n",
       "      <td>0.650832</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>292</td>\n",
       "      <td>1.239962</td>\n",
       "      <td>12.206073</td>\n",
       "      <td>9.843910</td>\n",
       "      <td>0</td>\n",
       "      <td>0.654665</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>124</td>\n",
       "      <td>1.273915</td>\n",
       "      <td>11.512925</td>\n",
       "      <td>9.037433</td>\n",
       "      <td>1</td>\n",
       "      <td>0.672357</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>296</td>\n",
       "      <td>1.294668</td>\n",
       "      <td>12.429216</td>\n",
       "      <td>9.600311</td>\n",
       "      <td>1</td>\n",
       "      <td>0.703306</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>301</td>\n",
       "      <td>1.341218</td>\n",
       "      <td>10.778956</td>\n",
       "      <td>8.036694</td>\n",
       "      <td>1</td>\n",
       "      <td>0.717117</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>88</td>\n",
       "      <td>1.316484</td>\n",
       "      <td>12.206073</td>\n",
       "      <td>9.271718</td>\n",
       "      <td>1</td>\n",
       "      <td>0.717323</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>229</td>\n",
       "      <td>1.360041</td>\n",
       "      <td>9.903487</td>\n",
       "      <td>7.281757</td>\n",
       "      <td>0</td>\n",
       "      <td>0.720354</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>51</td>\n",
       "      <td>1.351955</td>\n",
       "      <td>10.819778</td>\n",
       "      <td>8.003062</td>\n",
       "      <td>1</td>\n",
       "      <td>0.726186</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>167</td>\n",
       "      <td>1.407963</td>\n",
       "      <td>8.411833</td>\n",
       "      <td>5.974471</td>\n",
       "      <td>0</td>\n",
       "      <td>0.739380</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>79</td>\n",
       "      <td>1.367529</td>\n",
       "      <td>11.512925</td>\n",
       "      <td>8.418779</td>\n",
       "      <td>1</td>\n",
       "      <td>0.747059</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>311</td>\n",
       "      <td>1.324284</td>\n",
       "      <td>14.508657</td>\n",
       "      <td>10.955847</td>\n",
       "      <td>1</td>\n",
       "      <td>0.753807</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>189</td>\n",
       "      <td>1.351496</td>\n",
       "      <td>13.122363</td>\n",
       "      <td>9.709507</td>\n",
       "      <td>1</td>\n",
       "      <td>0.755490</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>122</td>\n",
       "      <td>1.427761</td>\n",
       "      <td>9.210340</td>\n",
       "      <td>6.450897</td>\n",
       "      <td>1</td>\n",
       "      <td>0.764020</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>188</td>\n",
       "      <td>1.370793</td>\n",
       "      <td>12.899220</td>\n",
       "      <td>9.410044</td>\n",
       "      <td>1</td>\n",
       "      <td>0.766306</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>232</td>\n",
       "      <td>1.422826</td>\n",
       "      <td>11.918390</td>\n",
       "      <td>8.376560</td>\n",
       "      <td>0</td>\n",
       "      <td>0.790409</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>206</td>\n",
       "      <td>1.380630</td>\n",
       "      <td>14.508657</td>\n",
       "      <td>10.508722</td>\n",
       "      <td>1</td>\n",
       "      <td>0.791073</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>117</td>\n",
       "      <td>1.434430</td>\n",
       "      <td>12.206073</td>\n",
       "      <td>8.509353</td>\n",
       "      <td>1</td>\n",
       "      <td>0.800837</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>75</td>\n",
       "      <td>1.420164</td>\n",
       "      <td>13.122363</td>\n",
       "      <td>9.240030</td>\n",
       "      <td>1</td>\n",
       "      <td>0.801195</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>45</td>\n",
       "      <td>1.424579</td>\n",
       "      <td>13.458836</td>\n",
       "      <td>9.447586</td>\n",
       "      <td>1</td>\n",
       "      <td>0.807280</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>92</td>\n",
       "      <td>1.451640</td>\n",
       "      <td>13.122363</td>\n",
       "      <td>9.039682</td>\n",
       "      <td>1</td>\n",
       "      <td>0.820082</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>112</td>\n",
       "      <td>1.512668</td>\n",
       "      <td>12.429216</td>\n",
       "      <td>8.216753</td>\n",
       "      <td>1</td>\n",
       "      <td>0.847640</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>111</td>\n",
       "      <td>1.575330</td>\n",
       "      <td>12.429216</td>\n",
       "      <td>7.889913</td>\n",
       "      <td>1</td>\n",
       "      <td>0.877381</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>228</td>\n",
       "      <td>1.677914</td>\n",
       "      <td>13.815511</td>\n",
       "      <td>8.233740</td>\n",
       "      <td>1</td>\n",
       "      <td>0.921259</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>110</td>\n",
       "      <td>1.713917</td>\n",
       "      <td>12.611538</td>\n",
       "      <td>7.358315</td>\n",
       "      <td>1</td>\n",
       "      <td>0.927019</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        mempc   lmembers      lnpop  success  predictions\n",
       "216  1.110516  10.308952   9.283026        0     0.501905\n",
       "299  1.096068  11.002100  10.037786        1     0.502808\n",
       "177  1.119458  10.043249   8.971530        0     0.504875\n",
       "269  1.092927  11.512925  10.534025        0     0.510537\n",
       "72   1.121430  10.308952   9.192685        0     0.512102\n",
       "266  1.153200   8.853665   7.677474        0     0.513390\n",
       "97   1.145338   9.615806   8.395606        0     0.520845\n",
       "223  1.131224  10.308952   9.113092        0     0.521278\n",
       "140  1.091469  12.611538  11.554644        0     0.532006\n",
       "197  1.138721  10.596635   9.305737        0     0.534021\n",
       "22   1.165337   9.510445   8.161110        0     0.537911\n",
       "67   1.127177  11.512925  10.213945        0     0.541620\n",
       "250  1.164155   9.903487   8.507015        1     0.544386\n",
       "154  1.163734  10.308952   8.858511        0     0.551816\n",
       "268  1.140233  11.512925  10.096996        1     0.553511\n",
       "99   1.147488  11.512925  10.033151        0     0.560119\n",
       "249  1.185595   9.903487   8.353182        1     0.564710\n",
       "173  1.170469  10.819778   9.243967        0     0.567882\n",
       "130  1.207249   9.210340   7.629198        0     0.572444\n",
       "131  1.213380   9.210340   7.590645        0     0.578314\n",
       "185  1.153886  12.206073  10.578233        1     0.579279\n",
       "105  1.130470  13.458836  11.905520        1     0.583003\n",
       "2    1.200712  10.308952   8.585698        1     0.586438\n",
       "312  1.162657  13.122363  11.286525        1     0.604309\n",
       "303  1.184168  12.736701  10.755821        1     0.615826\n",
       "186  1.259079   8.922658   7.086654        1     0.616633\n",
       "297  1.199000  12.206073  10.180211        0     0.619218\n",
       "0    1.226839  10.819778   8.819231        1     0.619573\n",
       "38   1.169789  13.815511  11.810257        1     0.623160\n",
       "96   1.225560  11.156251   9.102980        1     0.624276\n",
       "31   1.208794  12.206073  10.097724        1     0.627783\n",
       "141  1.183793  13.815511  11.670548        1     0.634871\n",
       "32   1.289875   8.517193   6.603117        1     0.638685\n",
       "226  1.265478  10.126631   8.002215        0     0.642693\n",
       "114  1.247988  11.512925   9.225190        0     0.650106\n",
       "113  1.217276  13.122363  10.780103        1     0.650832\n",
       "292  1.239962  12.206073   9.843910        0     0.654665\n",
       "124  1.273915  11.512925   9.037433        1     0.672357\n",
       "296  1.294668  12.429216   9.600311        1     0.703306\n",
       "301  1.341218  10.778956   8.036694        1     0.717117\n",
       "88   1.316484  12.206073   9.271718        1     0.717323\n",
       "229  1.360041   9.903487   7.281757        0     0.720354\n",
       "51   1.351955  10.819778   8.003062        1     0.726186\n",
       "167  1.407963   8.411833   5.974471        0     0.739380\n",
       "79   1.367529  11.512925   8.418779        1     0.747059\n",
       "311  1.324284  14.508657  10.955847        1     0.753807\n",
       "189  1.351496  13.122363   9.709507        1     0.755490\n",
       "122  1.427761   9.210340   6.450897        1     0.764020\n",
       "188  1.370793  12.899220   9.410044        1     0.766306\n",
       "232  1.422826  11.918390   8.376560        0     0.790409\n",
       "206  1.380630  14.508657  10.508722        1     0.791073\n",
       "117  1.434430  12.206073   8.509353        1     0.800837\n",
       "75   1.420164  13.122363   9.240030        1     0.801195\n",
       "45   1.424579  13.458836   9.447586        1     0.807280\n",
       "92   1.451640  13.122363   9.039682        1     0.820082\n",
       "112  1.512668  12.429216   8.216753        1     0.847640\n",
       "111  1.575330  12.429216   7.889913        1     0.877381\n",
       "228  1.677914  13.815511   8.233740        1     0.921259\n",
       "110  1.713917  12.611538   7.358315        1     0.927019"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df2 = df\n",
    "\n",
    "df2['predictions'] = predictions #create a new column predictions\n",
    "df2 = df2[df2['predictions']>0.5] # keep only them above 0.50 probability\n",
    "df2 =df2[['mempc','lmembers','lnpop','success','predictions']] #keep only the necessary\n",
    "\n",
    "df2.sort_values(by=['predictions'], inplace=True) #sort them in ascending format\n",
    "df2\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* The minimum probabilty is 0.501905 and the respective mepmc is 1.110516.\n",
    "* mempc is : lmemebers/lnpop\n",
    "* mempc is : e^10.308952 / e^9.283026 ~ 2.79 %\n",
    "* <b>So, the minimum participation in terms of percentage is 2.79%. Of course, if we set the probabilty more than 0.5 the result \n",
    "would be more safe.</b>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 7. Nonviolent Resistance, Target Regime Type, Geographical Location\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* We run a logistic   regression of success on the nonviolence indicator controlling for the POLITY IV score of campaign target (`tpolity`), the log of peakmembership, and the location’s logged population the year the campaign ends.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Optimization terminated successfully.\n",
      "         Current function value: 0.567143\n",
      "         Iterations 6\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "        <td>Model:</td>              <td>Logit</td>      <td>Pseudo R-squared:</td>    <td>0.163</td>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <td>Dependent Variable:</td>      <td>success</td>           <td>AIC:</td>         <td>169.9344</td> \n",
       "</tr>\n",
       "<tr>\n",
       "         <td>Date:</td>        <td>2020-05-02 14:53</td>       <td>BIC:</td>         <td>184.6782</td> \n",
       "</tr>\n",
       "<tr>\n",
       "   <td>No. Observations:</td>         <td>141</td>        <td>Log-Likelihood:</td>    <td>-79.967</td> \n",
       "</tr>\n",
       "<tr>\n",
       "       <td>Df Model:</td>              <td>4</td>            <td>LL-Null:</td>        <td>-95.506</td> \n",
       "</tr>\n",
       "<tr>\n",
       "     <td>Df Residuals:</td>           <td>136</td>         <td>LLR p-value:</td>    <td>2.9528e-06</td>\n",
       "</tr>\n",
       "<tr>\n",
       "      <td>Converged:</td>           <td>1.0000</td>           <td>Scale:</td>         <td>1.0000</td>  \n",
       "</tr>\n",
       "<tr>\n",
       "    <td>No. Iterations:</td>        <td>6.0000</td>              <td></td>               <td></td>     \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "      <td></td>       <th>Coef.</th>  <th>Std.Err.</th>    <th>z</th>     <th>P>|z|</th> <th>[0.025</th>  <th>0.975]</th> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Intercept</th> <td>-0.1085</td>  <td>1.4130</td>  <td>-0.0768</td> <td>0.9388</td> <td>-2.8779</td> <td>2.6609</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>nonviol</th>   <td>0.9048</td>   <td>0.4636</td>  <td>1.9517</td>  <td>0.0510</td> <td>-0.0038</td> <td>1.8134</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>tpolity</th>   <td>0.0520</td>   <td>0.0298</td>  <td>1.7439</td>  <td>0.0812</td> <td>-0.0064</td> <td>0.1104</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>lmembers</th>  <td>0.3751</td>   <td>0.1282</td>  <td>2.9264</td>  <td>0.0034</td> <td>0.1239</td>  <td>0.6263</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>lnpop</th>     <td>-0.4363</td>  <td>0.1423</td>  <td>-3.0671</td> <td>0.0022</td> <td>-0.7151</td> <td>-0.1575</td>\n",
       "</tr>\n",
       "</table>"
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary2.Summary'>\n",
       "\"\"\"\n",
       "                         Results: Logit\n",
       "=================================================================\n",
       "Model:              Logit            Pseudo R-squared: 0.163     \n",
       "Dependent Variable: success          AIC:              169.9344  \n",
       "Date:               2020-05-02 14:53 BIC:              184.6782  \n",
       "No. Observations:   141              Log-Likelihood:   -79.967   \n",
       "Df Model:           4                LL-Null:          -95.506   \n",
       "Df Residuals:       136              LLR p-value:      2.9528e-06\n",
       "Converged:          1.0000           Scale:            1.0000    \n",
       "No. Iterations:     6.0000                                       \n",
       "------------------------------------------------------------------\n",
       "               Coef.   Std.Err.     z     P>|z|    [0.025   0.975]\n",
       "------------------------------------------------------------------\n",
       "Intercept     -0.1085    1.4130  -0.0768  0.9388  -2.8779   2.6609\n",
       "nonviol        0.9048    0.4636   1.9517  0.0510  -0.0038   1.8134\n",
       "tpolity        0.0520    0.0298   1.7439  0.0812  -0.0064   0.1104\n",
       "lmembers       0.3751    0.1282   2.9264  0.0034   0.1239   0.6263\n",
       "lnpop         -0.4363    0.1423  -3.0671  0.0022  -0.7151  -0.1575\n",
       "=================================================================\n",
       "\n",
       "\"\"\""
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "tpolity_log = logit(\"success ~ nonviol + tpolity + lmembers + lnpop\", df).fit() #log model \n",
    "\n",
    "tpolity_log.summary2() #summary statistics"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* one unit increase in nonviol has a result an increase of 0.9048 in the log odds of successful campaign. This means that the odds ratio increases by e^0.9048(~2.47)\n",
    "\n",
    "* one unit increase in tpolity has a result an increase of 0.0520 in the log odds of successful campaign. This means that the odds ratio increases by e^0.0520(~1.05)\n",
    "\n",
    "* one unit increase in lmembers  has a result an increase of 0.3751 in the log odds of successful campaign. This means that the odds ratio increases by e^0.3751(~1.46)\n",
    "\n",
    "* one unit increase in lnpop  has a result a decrease of 0.4363 in the log odds of successful campaign. This means that the odds ratio decreases by e^-0.4363(~0.65)\n",
    "\n",
    "* If we hold all the independent variables to zero, the successful campaign log odds comes from intercerpt, this means is e^-0.1085(~0.90).\n",
    "\n",
    " <b> As we can see the nonviolent indicator remains very significant even if we control for the regime type. </b> "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* We examine whether nonviolent resistance remains significant even if we control for geographical location of the campaign"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Optimization terminated successfully.\n",
      "         Current function value: 0.603612\n",
      "         Iterations 5\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "        <td>Model:</td>              <td>Logit</td>      <td>Pseudo R-squared:</td>    <td>0.065</td>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <td>Dependent Variable:</td>      <td>success</td>           <td>AIC:</td>         <td>395.9336</td> \n",
       "</tr>\n",
       "<tr>\n",
       "         <td>Date:</td>        <td>2020-05-02 14:53</td>       <td>BIC:</td>         <td>407.2666</td> \n",
       "</tr>\n",
       "<tr>\n",
       "   <td>No. Observations:</td>         <td>323</td>        <td>Log-Likelihood:</td>    <td>-194.97</td> \n",
       "</tr>\n",
       "<tr>\n",
       "       <td>Df Model:</td>              <td>2</td>            <td>LL-Null:</td>        <td>-208.47</td> \n",
       "</tr>\n",
       "<tr>\n",
       "     <td>Df Residuals:</td>           <td>320</td>         <td>LLR p-value:</td>    <td>1.3696e-06</td>\n",
       "</tr>\n",
       "<tr>\n",
       "      <td>Converged:</td>           <td>1.0000</td>           <td>Scale:</td>         <td>1.0000</td>  \n",
       "</tr>\n",
       "<tr>\n",
       "    <td>No. Iterations:</td>        <td>5.0000</td>              <td></td>               <td></td>     \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "      <td></td>       <th>Coef.</th>  <th>Std.Err.</th>    <th>z</th>     <th>P>|z|</th> <th>[0.025</th>  <th>0.975]</th> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Intercept</th> <td>-0.7061</td>  <td>0.2976</td>  <td>-2.3724</td> <td>0.0177</td> <td>-1.2894</td> <td>-0.1228</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>nonviol</th>   <td>1.2019</td>   <td>0.2509</td>  <td>4.7903</td>  <td>0.0000</td> <td>0.7101</td>  <td>1.6937</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>lccode</th>    <td>-0.0008</td>  <td>0.0005</td>  <td>-1.4487</td> <td>0.1474</td> <td>-0.0018</td> <td>0.0003</td> \n",
       "</tr>\n",
       "</table>"
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary2.Summary'>\n",
       "\"\"\"\n",
       "                         Results: Logit\n",
       "=================================================================\n",
       "Model:              Logit            Pseudo R-squared: 0.065     \n",
       "Dependent Variable: success          AIC:              395.9336  \n",
       "Date:               2020-05-02 14:53 BIC:              407.2666  \n",
       "No. Observations:   323              Log-Likelihood:   -194.97   \n",
       "Df Model:           2                LL-Null:          -208.47   \n",
       "Df Residuals:       320              LLR p-value:      1.3696e-06\n",
       "Converged:          1.0000           Scale:            1.0000    \n",
       "No. Iterations:     5.0000                                       \n",
       "------------------------------------------------------------------\n",
       "               Coef.   Std.Err.     z     P>|z|    [0.025   0.975]\n",
       "------------------------------------------------------------------\n",
       "Intercept     -0.7061    0.2976  -2.3724  0.0177  -1.2894  -0.1228\n",
       "nonviol        1.2019    0.2509   4.7903  0.0000   0.7101   1.6937\n",
       "lccode        -0.0008    0.0005  -1.4487  0.1474  -0.0018   0.0003\n",
       "=================================================================\n",
       "\n",
       "\"\"\""
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lccode_log = logit(\"success ~ nonviol+lccode\", df).fit() #log model \n",
    "\n",
    "lccode_log.summary2() #summary statistics"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* as a firt glance Pseudo-Rsquared dropped significantly.\n",
    "\n",
    "* Secondly, the lccode P-value is > 0.025 which means that is not statistically significant.\n",
    "\n",
    "* But mainly we must conduct analysis on log odds of lccode. One unit increase in lccode  has a result a decrease of 0.0008 in the log odds of successful campaign. This means that the odds ratio decreases by e^-0.0008(~0.9992) or by 0.0008%.\n",
    "\n",
    " <b> As we can see the lccode indicator is very minor and not significant. Location is not a good factor of understanding if a campaign would be successful. </b> "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
